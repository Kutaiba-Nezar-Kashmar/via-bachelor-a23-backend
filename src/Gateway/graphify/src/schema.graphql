input userInput {
    userId: String!
    photoUrl: String
    displayName: String!
    dateOfBirth: String!
    LastSeenOnline: String
    CreationDate: String!
}

input geoLocationInput {
    lat: Float!
    lng: Float!
}

type Status {
    code: Int
    message: String
}

type GeoLocation {
    lat: String
    lng: String
}

type Location {
    country: String
    city: String
    postalCode: String
    streetNumber: String
    houseNumber: String
    floor: String
    geoLocation: GeoLocation
}

type User {
    userId: String
    displayName: String
    photoUrl: String
    lastSeenOnline: String
    creationDate: String
}

type Event {
    id: Int
    title: String
    startDate: String
    endDate: String
    createdDate: String
    lastUpdateDate: String
    isPrivate: Boolean
    adultsOnly: Boolean
    isPaid: Boolean
    host: User
    maxNumberOfAttendees: Int
    url: String
    description: String
    accessCode: String
    category: String
    keywords: [String]
    images: [String]
    attendees: [User]
    geoLocation: GeoLocation
    city: String
    location: String
}

type Review {
    id: Int
    rate: Float
    reviewerId: String
    eventId: Int
    reviewDate: String
}

type Recommendation {
    event: Event
    relevanceScore: Float
}

type Recommendations {
    user: User
    eventsProcessed: [Event]
    reviewsProcessed: [Review]
    result: [Recommendation]
}

type InterestSurvey {
    user: User
    keywords: [String]
    categories: [String]
}

type EventResponse {
    result: Event
    status: Status
}

type EventsResponse {
    result: [Event]
    status: Status
}

type KeywordsResponse {
    result: [String]
    status: Status
}

type CategoriesResponse {
    result: [String]
    status: Status
}

type ReviewResponse {
    result: Review
    status: Status
}

type ReviewsByUserResponse {
    result: [Review]
    status: Status
}

type RecommendationsResponse {
    result: Recommendations
    status: Status
}

type InterestSurveyResponse {
    result: InterestSurvey
    status: Status
}

type Query {
    """
    All arguments are optional filters to apply.
    from: UTC DateTime string. Fitlers events by endDate >= from
    hostId: UUID string. Filters events by host.
    """
    events(
        from: String
        hostId: String
        includePrivateEvents: Boolean
    ): EventsResponse
    categories: CategoriesResponse
    keywords: KeywordsResponse
    allPublicEvents: EventsResponse
    event(eventId: Int): EventResponse
    reviewsByUser(userId: String): ReviewsByUserResponse
    finishedJoinedEvents(userId: String): EventsResponse
    recommendations(userId: String!, limit: Int): RecommendationsResponse
    interestSurvey(userId: String!): InterestSurveyResponse
}

type Mutation {
    """
    Adds user as attendee to event. Does not return anything.
    """
    joinEvent(eventId: Int!, userId: String!): EventResponse

    """
    Create new event. Returns CreateEventResposne.
    """
    createEvent(
        title: String!
        startDate: String!
        endDate: String!
        createdDate: String!
        lastUpdateDate: String
        isPrivate: Boolean!
        adultsOnly: Boolean!
        isPaid: Boolean!
        host: userInput!
        maxNumberOfAttendees: Int!
        url: String
        description: String
        location: String!
        city: String!
        geoLocation: geoLocationInput!
        category: String!
        keywords: [String!]
    ): EventResponse

    createReview(
        rate: Float!
        reviewerId: String!
        eventId: Int!
        reviewDate: String!
    ): ReviewResponse

    storeInterestSurvey(
        userId: String!
        keywords: [String]!
        categories: [String]!
    ): InterestSurveyResponse
}
